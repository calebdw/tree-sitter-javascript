============================================
JSX injection
============================================

const foo = 2;

<div>{{foo}}</div>

----

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (number)))
  (expression_statement
    (jsx_element
      (jsx_opening_element
        (identifier))
      (jsx_expression
        (object
          (shorthand_property_identifier)))
      (jsx_closing_element
        (identifier)))))

=========================================================
JSX strings with unescaped newlines for TSX attributes
=========================================================

<Element Attribute="hello
                    world"></Element>;

<Element Attribute='hello
                    world'></Element>;

---

(program
  (expression_statement
    (jsx_element
      (jsx_opening_element
        (identifier)
        (jsx_attribute (property_identifier) (string (string_fragment))))
      (jsx_closing_element
        (identifier))))
 (expression_statement
   (jsx_element
     (jsx_opening_element
       (identifier)
       (jsx_attribute (property_identifier) (string (string_fragment))))
     (jsx_closing_element
       (identifier)))))

==============================================
Simple JSX elements
==============================================

a = <div className='b' tabIndex={1} />;
b = <Foo.Bar>a <span>b</span> c</Foo.Bar>;
b = <Foo.Bar.Baz.Baz></Foo.Bar.Baz.Baz>;

---

(program
  (expression_statement (assignment_expression
    (identifier)
    (jsx_self_closing_element
      (identifier)
      (jsx_attribute (property_identifier) (string (string_fragment)))
      (jsx_attribute (property_identifier) (jsx_expression (number))))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element (member_expression (identifier) (property_identifier)))
      (jsx_text)
      (jsx_element
        (jsx_opening_element (identifier))
        (jsx_text)
        (jsx_closing_element (identifier)))
      (jsx_text)
      (jsx_closing_element (member_expression (identifier) (property_identifier))))))
  (expression_statement (assignment_expression (identifier) (jsx_element (jsx_opening_element (member_expression (member_expression (member_expression (identifier) (property_identifier)) (property_identifier)) (property_identifier))) (jsx_closing_element (member_expression (member_expression (member_expression (identifier) (property_identifier)) (property_identifier)) (property_identifier)))))))

==============================================
Anonymous JSX element
==============================================

a = <></>;
a = <E><></></E>;

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (jsx_element
        (jsx_opening_element)
        (jsx_closing_element))))
  (expression_statement
    (assignment_expression
      (identifier)
      (jsx_element
        (jsx_opening_element (identifier))
        (jsx_element
          (jsx_opening_element)
          (jsx_closing_element))
        (jsx_closing_element (identifier))))))

==============================================
Expressions within JSX elements
==============================================

a = <a b c={d}> e {f} g </a>
h = <i>{...j}</i>
b = <Text {...j} />
b = <Text {...j}></Text>


---

(program
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element (identifier)
        (jsx_attribute (property_identifier))
        (jsx_attribute (property_identifier) (jsx_expression (identifier))))
      (jsx_text)
      (jsx_expression (identifier))
      (jsx_text)
      (jsx_closing_element (identifier)))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element (identifier))
      (jsx_expression (spread_element (identifier)))
      (jsx_closing_element (identifier)))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_self_closing_element
      (identifier)
      (jsx_expression (spread_element (identifier))))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element
        (identifier)
        (jsx_expression (spread_element (identifier))))
      (jsx_closing_element (identifier))))))

============================================
JSX
============================================

var a = <Foo></Foo>
b = <Foo.Bar></Foo.Bar>
c = <> <Foo /> </>
d = <Bar> <Foo /> </Bar>
e = <Foo bar/>
f = <Foo bar="string" baz={2} data-i8n="dialogs.welcome.heading" bam />
g = <Avatar userId={foo.creatorId} />
h = <input checked={this.state.selectedNewStreetType === 'new-street-default' || !this.state.selectedNewStreetType}> </input>
i = <Foo:Bar bar={}>{...children}</Foo:Bar>

---

(program
  (variable_declaration (variable_declarator (identifier)
    (jsx_element (jsx_opening_element (identifier)) (jsx_closing_element (identifier)))))
  (expression_statement (assignment_expression (identifier)
    (jsx_element
      (jsx_opening_element (member_expression (identifier) (property_identifier)))
      (jsx_closing_element (member_expression (identifier) (property_identifier))))))
  (expression_statement (assignment_expression (identifier)
    (jsx_element (jsx_opening_element) (jsx_self_closing_element (identifier)) (jsx_closing_element))))
  (expression_statement (assignment_expression (identifier)
    (jsx_element
      (jsx_opening_element (identifier))
      (jsx_self_closing_element (identifier))
      (jsx_closing_element (identifier)))))
  (expression_statement (assignment_expression (identifier)
    (jsx_self_closing_element (identifier) (jsx_attribute (property_identifier)))))
  (expression_statement (assignment_expression (identifier)
    (jsx_self_closing_element
      (identifier)
      (jsx_attribute (property_identifier) (string (string_fragment)))
      (jsx_attribute (property_identifier) (jsx_expression (number)))
      (jsx_attribute (property_identifier) (string (string_fragment)))
      (jsx_attribute (property_identifier)))))
  (expression_statement (assignment_expression (identifier)
    (jsx_self_closing_element
      (identifier)
      (jsx_attribute
        (property_identifier)
        (jsx_expression (member_expression (identifier) (property_identifier)))))))
  (expression_statement (assignment_expression (identifier)
    (jsx_element
      (jsx_opening_element
        (identifier)
        (jsx_attribute
          (property_identifier)
          (jsx_expression
            (binary_expression
              (binary_expression
                (member_expression
                  (member_expression (this) (property_identifier))
                  (property_identifier))
                (string (string_fragment)))
              (unary_expression
                (member_expression
                  (member_expression (this) (property_identifier))
                  (property_identifier)))))))
          (jsx_closing_element (identifier)))))
  (expression_statement (assignment_expression (identifier)
    (jsx_element
      (jsx_opening_element
        (jsx_namespace_name (identifier) (identifier))
        (jsx_attribute (property_identifier) (jsx_expression)))
      (jsx_expression (spread_element (identifier)))
      (jsx_closing_element (jsx_namespace_name (identifier) (identifier)))))))
